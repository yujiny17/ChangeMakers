async function S3ImageUpload(photo) {
  try {
    const { key } = await Storage.put(photo.name, { ...photo });
    return key;
  } catch (error) {
    console.log("Error uploading image", error);
  }
  return null;
}

// uploads photo so S3 bucket
// returns key to photo in S3 bucket
async function uploadPhotos(photos) {
  let photoKeys = [];
  await photos.map(async (photo) => {
    let photoKey = await S3ImageUpload(photo);
    // alert and return if error uploading picture
    if (photoKey == null) {
      alert("Error uploading picture");
    } else {
      photoKeys.push(photoKey);
    }
  });
  return photoKeys;
}

async function DDBPhotoUpload(photo) {
  try {
    await API.graphql(graphqlOperation(createPhoto, { input: photo })).then(
      (resp) => {
        console.log("response", resp);
        return resp.data.id;
      }
    );
  } catch (error) {
    console.log("Error uploading photo's entry in DDB", error);
  }
  return null;
}

// return photoArray with ids of each photo
async function uploadPhotosDDB(photoKeys, postId) {
  console.log("in uploadPhotosDDB with photoKeys", photoKeys[0], photoKeys[1]);
  let photoArray = [];
  await photoKeys.map(async (key) => {
    console.log("current photo key", key);
    let photo = { id: key, postId: postId };
    photoArray.push(DDBPhotoUpload(photo));
    // try {
    //   await API.graphql(graphqlOperation(createPhoto, { input: photo })).then(
    //     (resp) => {
    //       console.log("response", resp);
    //       photoArray.push(resp.data.id);
    //     }
    //   );
    // } catch (error) {
    //   console.log("Error uploading photo's entry in DDB", error);
    // }
  });
  console.log("end of uploadPhotosDDB", photoArray);
  return photoArray;
}
