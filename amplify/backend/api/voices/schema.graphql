# each model has "private" allowed to create for mock testing purposes

# NEED TO ADD: action items, reactions (# of each), comments,
# tag other accounts, sources, text, images, videos, links!!, links to in-app posts
type Post
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "username"
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read, create, update] }
      { allow: public, operations: [read] }
    ]
  )
  @key(
    name: "BySpecificOwner"
    fields: ["username", "createdAt"]
    queryField: "listPostsBySpecificOwner"
  ) {
  id: ID!
  username: String!
  title: String
  text: String
  photos: [ID] # 	post: Post @connection(fields: ["id"])
  upvote: Int
  downvote: Int
  totalvote: Int
  misinformation: Int
  createdAt: String
}

# add post id, createdAt GSI
type Photo @model {
  id: ID!
  postId: ID
  type: String
}

type FollowRelationship
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "followerId"
        operations: [read, create, delete]
      }
      { allow: private, operations: [read, create] }
    ]
  )
  @key(fields: ["followeeId", "followerId"])
  @key(
    name: "ByFollower"
    fields: ["followerId", "followeeId"]
    queryField: "listFollowRelationshipsbyFollower"
  ) {
  followeeId: ID!
  followerId: ID!
  following: Boolean
}

type PersonalTimeline
  @model
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "username"
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read, create] }
    ]
  )
  @key(
    name: "ByOwner"
    fields: ["username", "createdAt"]
    queryField: "listPersonalTimelinesByOwner"
  ) {
  username: String!
  postId: ID!
  createdAt: String
  post: Post @connection(fields: ["postId"])
}

type User @model @key(fields: ["username"]) {
  username: String!
  email: String!
  photo: String
  # timelines: [ID]
}

type UserPostActivity @model @key(fields: ["username", "postId"]) {
  username: String!
  postId: ID!
  upvote: Boolean
  downvote: Boolean
  misinformation: Boolean
  # comments: []
}
